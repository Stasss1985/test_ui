{"uid":"e7651d37c572220a","name":"test_add_new_person_in_person_page","fullName":"tests.test_person_page.test_add_person_in_person_page#test_add_new_person_in_person_page","historyId":"fbe98518bba797c4fae8c993fbc85749","time":{"start":1747550115836,"stop":1747550124468,"duration":8632},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/person\" class=\"side-nav-link d-flex align-items-center\">...</a> is not clickable at point (130, 218). Other element would receive the click: <div class=\"p-dialog-mask p-component-overlay p-component-overlay-enter\" style=\"z-index: 1102;\">...</div>\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x005CFC83+61635]\n\tGetHandleVerifier [0x005CFCC4+61700]\n\t(No symbol) [0x003F05D3]\n\t(No symbol) [0x0043ECB0]\n\t(No symbol) [0x0043D054]\n\t(No symbol) [0x0043ABF7]\n\t(No symbol) [0x00439EFB]\n\t(No symbol) [0x0042E5A5]\n\t(No symbol) [0x0045D29C]\n\t(No symbol) [0x0042E034]\n\t(No symbol) [0x0045D514]\n\t(No symbol) [0x0047E61B]\n\t(No symbol) [0x0045D096]\n\t(No symbol) [0x0042C840]\n\t(No symbol) [0x0042D6A4]\n\tGetHandleVerifier [0x008545A3+2701795]\n\tGetHandleVerifier [0x0084FD26+2683238]\n\tGetHandleVerifier [0x0086AA6E+2793134]\n\tGetHandleVerifier [0x005E6945+155013]\n\tGetHandleVerifier [0x005ED02D+181357]\n\tGetHandleVerifier [0x005D74D8+92440]\n\tGetHandleVerifier [0x005D7680+92864]\n\tGetHandleVerifier [0x005C2070+5296]\n\tBaseThreadInitThunk [0x767B5D49+25]\n\tRtlInitializeExceptionChain [0x777BD03B+107]\n\tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]","statusTrace":"open_crm_as_admin = None, lead_page = <pages.lead_page.lead_page.LeadPage object at 0x000002D7D00DD910>\nperson_page = <pages.person_page.person_page.PersonPage object at 0x000002D7D00DD790>\n\n    @pytest.mark.smoke\n    def test_add_new_person_in_person_page(open_crm_as_admin, lead_page, person_page):\n        # Смена офиса\n        lead_page.change_office_1_maya()\n        lead_page.take_screenshot()\n        # Переход на страницу \"Клиенты\" person\n>       person_page.navigate_to_person_page()\n\ntests\\test_person_page\\test_add_person_in_person_page.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\person_page\\person_page.py:67: in navigate_to_person_page\n    self.click(self.loc.PERSON_HREF)\npages\\base_page.py:56: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:570: in _execute\n    return self._parent.execute(command, params)\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002D7D00DB590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x777BD03B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/person\" class=\"side-nav-link d-flex align-items-center\">...</a> is not clickable at point (130, 218). Other element would receive the click: <div class=\"p-dialog-mask p-component-overlay p-component-overlay-enter\" style=\"z-index: 1102;\">...</div>\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x005CFC83+61635]\nE       \tGetHandleVerifier [0x005CFCC4+61700]\nE       \t(No symbol) [0x003F05D3]\nE       \t(No symbol) [0x0043ECB0]\nE       \t(No symbol) [0x0043D054]\nE       \t(No symbol) [0x0043ABF7]\nE       \t(No symbol) [0x00439EFB]\nE       \t(No symbol) [0x0042E5A5]\nE       \t(No symbol) [0x0045D29C]\nE       \t(No symbol) [0x0042E034]\nE       \t(No symbol) [0x0045D514]\nE       \t(No symbol) [0x0047E61B]\nE       \t(No symbol) [0x0045D096]\nE       \t(No symbol) [0x0042C840]\nE       \t(No symbol) [0x0042D6A4]\nE       \tGetHandleVerifier [0x008545A3+2701795]\nE       \tGetHandleVerifier [0x0084FD26+2683238]\nE       \tGetHandleVerifier [0x0086AA6E+2793134]\nE       \tGetHandleVerifier [0x005E6945+155013]\nE       \tGetHandleVerifier [0x005ED02D+181357]\nE       \tGetHandleVerifier [0x005D74D8+92440]\nE       \tGetHandleVerifier [0x005D7680+92864]\nE       \tGetHandleVerifier [0x005C2070+5296]\nE       \tBaseThreadInitThunk [0x767B5D49+25]\nE       \tRtlInitializeExceptionChain [0x777BD03B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]\n\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1747548177795,"stop":1747548177797,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"play_sound_after_tests","time":{"start":1747548177797,"stop":1747548177797,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"driver","time":{"start":1747550091482,"stop":1747550100509,"duration":9027},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"login_page","time":{"start":1747550100509,"stop":1747550100817,"duration":308},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"open_crm_as_admin","time":{"start":1747550100818,"stop":1747550115827,"duration":15009},"status":"passed","steps":[{"name":"enter correct login and password","time":{"start":1747550106434,"stop":1747550115373,"duration":8939},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Check correct url","time":{"start":1747550115373,"stop":1747550115379,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"attachments":[{"uid":"e3e92bb97e77c8bc","name":"screenshot","source":"e3e92bb97e77c8bc.png","type":"image/png","size":194783}],"parameters":[],"stepsCount":2,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"lead_page","time":{"start":1747550115828,"stop":1747550115833,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"person_page","time":{"start":1747550115833,"stop":1747550115835,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/person\" class=\"side-nav-link d-flex align-items-center\">...</a> is not clickable at point (130, 218). Other element would receive the click: <div class=\"p-dialog-mask p-component-overlay p-component-overlay-enter\" style=\"z-index: 1102;\">...</div>\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x005CFC83+61635]\n\tGetHandleVerifier [0x005CFCC4+61700]\n\t(No symbol) [0x003F05D3]\n\t(No symbol) [0x0043ECB0]\n\t(No symbol) [0x0043D054]\n\t(No symbol) [0x0043ABF7]\n\t(No symbol) [0x00439EFB]\n\t(No symbol) [0x0042E5A5]\n\t(No symbol) [0x0045D29C]\n\t(No symbol) [0x0042E034]\n\t(No symbol) [0x0045D514]\n\t(No symbol) [0x0047E61B]\n\t(No symbol) [0x0045D096]\n\t(No symbol) [0x0042C840]\n\t(No symbol) [0x0042D6A4]\n\tGetHandleVerifier [0x008545A3+2701795]\n\tGetHandleVerifier [0x0084FD26+2683238]\n\tGetHandleVerifier [0x0086AA6E+2793134]\n\tGetHandleVerifier [0x005E6945+155013]\n\tGetHandleVerifier [0x005ED02D+181357]\n\tGetHandleVerifier [0x005D74D8+92440]\n\tGetHandleVerifier [0x005D7680+92864]\n\tGetHandleVerifier [0x005C2070+5296]\n\tBaseThreadInitThunk [0x767B5D49+25]\n\tRtlInitializeExceptionChain [0x777BD03B+107]\n\tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]","statusTrace":"open_crm_as_admin = None, lead_page = <pages.lead_page.lead_page.LeadPage object at 0x000002D7D00DD910>\nperson_page = <pages.person_page.person_page.PersonPage object at 0x000002D7D00DD790>\n\n    @pytest.mark.smoke\n    def test_add_new_person_in_person_page(open_crm_as_admin, lead_page, person_page):\n        # Смена офиса\n        lead_page.change_office_1_maya()\n        lead_page.take_screenshot()\n        # Переход на страницу \"Клиенты\" person\n>       person_page.navigate_to_person_page()\n\ntests\\test_person_page\\test_add_person_in_person_page.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\person_page\\person_page.py:67: in navigate_to_person_page\n    self.click(self.loc.PERSON_HREF)\npages\\base_page.py:56: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:570: in _execute\n    return self._parent.execute(command, params)\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002D7D00DB590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x777BD03B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/person\" class=\"side-nav-link d-flex align-items-center\">...</a> is not clickable at point (130, 218). Other element would receive the click: <div class=\"p-dialog-mask p-component-overlay p-component-overlay-enter\" style=\"z-index: 1102;\">...</div>\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x005CFC83+61635]\nE       \tGetHandleVerifier [0x005CFCC4+61700]\nE       \t(No symbol) [0x003F05D3]\nE       \t(No symbol) [0x0043ECB0]\nE       \t(No symbol) [0x0043D054]\nE       \t(No symbol) [0x0043ABF7]\nE       \t(No symbol) [0x00439EFB]\nE       \t(No symbol) [0x0042E5A5]\nE       \t(No symbol) [0x0045D29C]\nE       \t(No symbol) [0x0042E034]\nE       \t(No symbol) [0x0045D514]\nE       \t(No symbol) [0x0047E61B]\nE       \t(No symbol) [0x0045D096]\nE       \t(No symbol) [0x0042C840]\nE       \t(No symbol) [0x0042D6A4]\nE       \tGetHandleVerifier [0x008545A3+2701795]\nE       \tGetHandleVerifier [0x0084FD26+2683238]\nE       \tGetHandleVerifier [0x0086AA6E+2793134]\nE       \tGetHandleVerifier [0x005E6945+155013]\nE       \tGetHandleVerifier [0x005ED02D+181357]\nE       \tGetHandleVerifier [0x005D74D8+92440]\nE       \tGetHandleVerifier [0x005D7680+92864]\nE       \tGetHandleVerifier [0x005C2070+5296]\nE       \tBaseThreadInitThunk [0x767B5D49+25]\nE       \tRtlInitializeExceptionChain [0x777BD03B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]\n\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"2245a53063fdd6d6","name":"screenshot","source":"2245a53063fdd6d6.png","type":"image/png","size":190745},{"uid":"29973be10c2615bb","name":"log","source":"29973be10c2615bb.txt","type":"text/plain","size":392}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"driver::0","time":{"start":1747550124600,"stop":1747550127192,"duration":2592},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"play_sound_after_tests::0","time":{"start":1747550127192,"stop":1747550129485,"duration":2293},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.test_person_page"},{"name":"suite","value":"test_add_person_in_person_page"},{"name":"host","value":"LAPTOP-R624DMFA"},{"name":"thread","value":"2108-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_person_page.test_add_person_in_person_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["smoke"]},"source":"e7651d37c572220a.json","parameterValues":[]}