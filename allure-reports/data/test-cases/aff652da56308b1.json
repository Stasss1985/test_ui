{"uid":"aff652da56308b1","name":"test_create_old_lead_car_cash_contract_buy_back","fullName":"tests.test_add_lead_contract_buy_back#test_create_old_lead_car_cash_contract_buy_back","historyId":"73416cf51b225a66f5590b8431613a6e","time":{"start":1747562553558,"stop":1747562842126,"duration":288568},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1277, 736)\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x0128FC83+61635]\n\tGetHandleVerifier [0x0128FCC4+61700]\n\t(No symbol) [0x010B05D3]\n\t(No symbol) [0x010FECB0]\n\t(No symbol) [0x010FD054]\n\t(No symbol) [0x010FABF7]\n\t(No symbol) [0x010F9EFB]\n\t(No symbol) [0x010EE5A5]\n\t(No symbol) [0x0111D29C]\n\t(No symbol) [0x010EE034]\n\t(No symbol) [0x0111D514]\n\t(No symbol) [0x0113E61B]\n\t(No symbol) [0x0111D096]\n\t(No symbol) [0x010EC840]\n\t(No symbol) [0x010ED6A4]\n\tGetHandleVerifier [0x015145A3+2701795]\n\tGetHandleVerifier [0x0150FD26+2683238]\n\tGetHandleVerifier [0x0152AA6E+2793134]\n\tGetHandleVerifier [0x012A6945+155013]\n\tGetHandleVerifier [0x012AD02D+181357]\n\tGetHandleVerifier [0x012974D8+92440]\n\tGetHandleVerifier [0x01297680+92864]\n\tGetHandleVerifier [0x01282070+5296]\n\tBaseThreadInitThunk [0x767B5D49+25]\n\tRtlInitializeExceptionChain [0x777BD03B+107]\n\tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]","statusTrace":"open_crm_as_admin = None, lead_page = <pages.lead_page.lead_page.LeadPage object at 0x00000211411820D0>\nproduct_page = <pages.lead_page.product_page.ProductPage object at 0x0000021141182B50>\ncontract_create_page = <pages.lead_page.contract_сreate_page.ContractCreatePage object at 0x0000021141183390>\ndo_operation_with_contract_page = <pages.contract_page.do_operation_with_contract_page.DoOperationContractPage object at 0x0000021141182650>\n\n    @pytest.mark.smoke('smoke test')\n    def test_create_old_lead_car_cash_contract_buy_back(open_crm_as_admin, lead_page, product_page, contract_create_page,\n                                                        do_operation_with_contract_page):\n        # Смена офиса\n        lead_page.change_office_krasnix_partisan()\n        lead_page.take_screenshot()\n        # Пополнение кассы\n        lead_page.add_cash_in_cash_register(5000)\n        lead_page.take_screenshot()\n        # Переход к созданию лида\n        lead_page.navigate_to_lead_create()\n        lead_page.take_screenshot()\n        # Выбор клиента из базы\n        lead_page.chose_old_client_to_lead()\n        lead_page.take_screenshot()\n        # Добавление продукта\n        product_page.add_product_car()\n        product_page.take_screenshot()\n        # Выбор тарифа\n        contract_create_page.contract_tariff_chose_1()\n        contract_create_page.take_screenshot()\n        # Создание договора\n        contract_create_page.create_operation_create_contract()\n        contract_create_page.take_screenshot()\n        # Печать документа\n        contract_create_page.print_document()\n        contract_create_page.take_screenshot()\n        # Печать чека создания \"догов потребит займа\"\n        contract_create_page.print_check()\n        contract_create_page.take_screenshot()\n        # Проверка статуса создания сделки (печати чека)\n        contract_create_page.compare_text_status()\n        contract_create_page.take_screenshot()\n        # Переход по ссылке на страницу сделки (contract)\n        contract_create_page.xref_go_to_contract()\n        contract_create_page.take_screenshot()\n        # Оформление выкупа\n>       do_operation_with_contract_page.contract_create_operation_buy_back()\n\ntests\\test_add_lead_contract_buy_back.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\contract_page\\do_operation_with_contract_page.py:26: in contract_create_operation_buy_back\n    self.click(self.loc.BTN_CREATE_OPERATIONS)\npages\\base_page.py:56: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:570: in _execute\n    return self._parent.execute(command, params)\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021141181610>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x777BD03B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1277, 736)\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0128FC83+61635]\nE       \tGetHandleVerifier [0x0128FCC4+61700]\nE       \t(No symbol) [0x010B05D3]\nE       \t(No symbol) [0x010FECB0]\nE       \t(No symbol) [0x010FD054]\nE       \t(No symbol) [0x010FABF7]\nE       \t(No symbol) [0x010F9EFB]\nE       \t(No symbol) [0x010EE5A5]\nE       \t(No symbol) [0x0111D29C]\nE       \t(No symbol) [0x010EE034]\nE       \t(No symbol) [0x0111D514]\nE       \t(No symbol) [0x0113E61B]\nE       \t(No symbol) [0x0111D096]\nE       \t(No symbol) [0x010EC840]\nE       \t(No symbol) [0x010ED6A4]\nE       \tGetHandleVerifier [0x015145A3+2701795]\nE       \tGetHandleVerifier [0x0150FD26+2683238]\nE       \tGetHandleVerifier [0x0152AA6E+2793134]\nE       \tGetHandleVerifier [0x012A6945+155013]\nE       \tGetHandleVerifier [0x012AD02D+181357]\nE       \tGetHandleVerifier [0x012974D8+92440]\nE       \tGetHandleVerifier [0x01297680+92864]\nE       \tGetHandleVerifier [0x01282070+5296]\nE       \tBaseThreadInitThunk [0x767B5D49+25]\nE       \tRtlInitializeExceptionChain [0x777BD03B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]\n\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1747561664237,"stop":1747561664237,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"play_sound_after_tests","time":{"start":1747561664237,"stop":1747561664237,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"driver","time":{"start":1747562533148,"stop":1747562541525,"duration":8377},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"login_page","time":{"start":1747562541525,"stop":1747562541936,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"open_crm_as_admin","time":{"start":1747562541936,"stop":1747562553536,"duration":11600},"status":"passed","steps":[{"name":"enter correct login and password","time":{"start":1747562546601,"stop":1747562553067,"duration":6466},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Check correct url","time":{"start":1747562553067,"stop":1747562553075,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"attachments":[{"uid":"7bf2e3f383204294","name":"screenshot","source":"7bf2e3f383204294.png","type":"image/png","size":194754}],"parameters":[],"stepsCount":2,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"lead_page","time":{"start":1747562553536,"stop":1747562553547,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"product_page","time":{"start":1747562553547,"stop":1747562553550,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"contract_create_page","time":{"start":1747562553550,"stop":1747562553553,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"do_operation_with_contract_page","time":{"start":1747562553554,"stop":1747562553557,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1277, 736)\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x0128FC83+61635]\n\tGetHandleVerifier [0x0128FCC4+61700]\n\t(No symbol) [0x010B05D3]\n\t(No symbol) [0x010FECB0]\n\t(No symbol) [0x010FD054]\n\t(No symbol) [0x010FABF7]\n\t(No symbol) [0x010F9EFB]\n\t(No symbol) [0x010EE5A5]\n\t(No symbol) [0x0111D29C]\n\t(No symbol) [0x010EE034]\n\t(No symbol) [0x0111D514]\n\t(No symbol) [0x0113E61B]\n\t(No symbol) [0x0111D096]\n\t(No symbol) [0x010EC840]\n\t(No symbol) [0x010ED6A4]\n\tGetHandleVerifier [0x015145A3+2701795]\n\tGetHandleVerifier [0x0150FD26+2683238]\n\tGetHandleVerifier [0x0152AA6E+2793134]\n\tGetHandleVerifier [0x012A6945+155013]\n\tGetHandleVerifier [0x012AD02D+181357]\n\tGetHandleVerifier [0x012974D8+92440]\n\tGetHandleVerifier [0x01297680+92864]\n\tGetHandleVerifier [0x01282070+5296]\n\tBaseThreadInitThunk [0x767B5D49+25]\n\tRtlInitializeExceptionChain [0x777BD03B+107]\n\tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]","statusTrace":"open_crm_as_admin = None, lead_page = <pages.lead_page.lead_page.LeadPage object at 0x00000211411820D0>\nproduct_page = <pages.lead_page.product_page.ProductPage object at 0x0000021141182B50>\ncontract_create_page = <pages.lead_page.contract_сreate_page.ContractCreatePage object at 0x0000021141183390>\ndo_operation_with_contract_page = <pages.contract_page.do_operation_with_contract_page.DoOperationContractPage object at 0x0000021141182650>\n\n    @pytest.mark.smoke('smoke test')\n    def test_create_old_lead_car_cash_contract_buy_back(open_crm_as_admin, lead_page, product_page, contract_create_page,\n                                                        do_operation_with_contract_page):\n        # Смена офиса\n        lead_page.change_office_krasnix_partisan()\n        lead_page.take_screenshot()\n        # Пополнение кассы\n        lead_page.add_cash_in_cash_register(5000)\n        lead_page.take_screenshot()\n        # Переход к созданию лида\n        lead_page.navigate_to_lead_create()\n        lead_page.take_screenshot()\n        # Выбор клиента из базы\n        lead_page.chose_old_client_to_lead()\n        lead_page.take_screenshot()\n        # Добавление продукта\n        product_page.add_product_car()\n        product_page.take_screenshot()\n        # Выбор тарифа\n        contract_create_page.contract_tariff_chose_1()\n        contract_create_page.take_screenshot()\n        # Создание договора\n        contract_create_page.create_operation_create_contract()\n        contract_create_page.take_screenshot()\n        # Печать документа\n        contract_create_page.print_document()\n        contract_create_page.take_screenshot()\n        # Печать чека создания \"догов потребит займа\"\n        contract_create_page.print_check()\n        contract_create_page.take_screenshot()\n        # Проверка статуса создания сделки (печати чека)\n        contract_create_page.compare_text_status()\n        contract_create_page.take_screenshot()\n        # Переход по ссылке на страницу сделки (contract)\n        contract_create_page.xref_go_to_contract()\n        contract_create_page.take_screenshot()\n        # Оформление выкупа\n>       do_operation_with_contract_page.contract_create_operation_buy_back()\n\ntests\\test_add_lead_contract_buy_back.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\contract_page\\do_operation_with_contract_page.py:26: in contract_create_operation_buy_back\n    self.click(self.loc.BTN_CREATE_OPERATIONS)\npages\\base_page.py:56: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:570: in _execute\n    return self._parent.execute(command, params)\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021141181610>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x777BD03B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1277, 736)\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0128FC83+61635]\nE       \tGetHandleVerifier [0x0128FCC4+61700]\nE       \t(No symbol) [0x010B05D3]\nE       \t(No symbol) [0x010FECB0]\nE       \t(No symbol) [0x010FD054]\nE       \t(No symbol) [0x010FABF7]\nE       \t(No symbol) [0x010F9EFB]\nE       \t(No symbol) [0x010EE5A5]\nE       \t(No symbol) [0x0111D29C]\nE       \t(No symbol) [0x010EE034]\nE       \t(No symbol) [0x0111D514]\nE       \t(No symbol) [0x0113E61B]\nE       \t(No symbol) [0x0111D096]\nE       \t(No symbol) [0x010EC840]\nE       \t(No symbol) [0x010ED6A4]\nE       \tGetHandleVerifier [0x015145A3+2701795]\nE       \tGetHandleVerifier [0x0150FD26+2683238]\nE       \tGetHandleVerifier [0x0152AA6E+2793134]\nE       \tGetHandleVerifier [0x012A6945+155013]\nE       \tGetHandleVerifier [0x012AD02D+181357]\nE       \tGetHandleVerifier [0x012974D8+92440]\nE       \tGetHandleVerifier [0x01297680+92864]\nE       \tGetHandleVerifier [0x01282070+5296]\nE       \tBaseThreadInitThunk [0x767B5D49+25]\nE       \tRtlInitializeExceptionChain [0x777BD03B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x777BCFC1+561]\n\n..\\PycharmProjects\\PycharmProjects\\tests_ui_karman\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","steps":[{"name":"Сравнение текста элемента с ожидаемым текстом","time":{"start":1747562823213,"stop":1747562823245,"duration":32},"status":"passed","steps":[],"attachments":[{"uid":"1e0eac967adc5b36","name":"Сравнение текста","source":"1e0eac967adc5b36.txt","type":"text/plain","size":103}],"parameters":[{"name":"locator","value":"('css selector', 'div.content-page li:nth-child(3) div.w-100 div')"},{"name":"expected_text","value":"'Завершено'"}],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1}],"attachments":[{"uid":"221e1b57d6b04a31","name":"screenshot","source":"221e1b57d6b04a31.png","type":"image/png","size":195181},{"uid":"1dabb4fca8f87621","name":"click_error_('css selector', '[aria-label=\"Далее\"]')","source":"1dabb4fca8f87621.png","type":"image/png","size":108740},{"uid":"8fd00e378128a691","name":"screenshot","source":"8fd00e378128a691.png","type":"image/png","size":105879},{"uid":"86dd541c25f4016b","name":"screenshot","source":"86dd541c25f4016b.png","type":"image/png","size":110212},{"uid":"b3b2bc92fc7a05d4","name":"screenshot","source":"b3b2bc92fc7a05d4.png","type":"image/png","size":119664},{"uid":"fe5856b7d738345f","name":"send_keys_error_('css selector', '#instanceV\\\\.756 > input')","source":"fe5856b7d738345f.png","type":"image/png","size":148140},{"uid":"3776c6ecbe170f77","name":"screenshot","source":"3776c6ecbe170f77.png","type":"image/png","size":144068},{"uid":"6bd1dd6304563916","name":"screenshot","source":"6bd1dd6304563916.png","type":"image/png","size":201068},{"uid":"57a80bd5c4f876e0","name":"screenshot","source":"57a80bd5c4f876e0.png","type":"image/png","size":97265},{"uid":"9e1de77d71193320","name":"screenshot","source":"9e1de77d71193320.png","type":"image/png","size":117977},{"uid":"a1ecd6efe397da70","name":"screenshot","source":"a1ecd6efe397da70.png","type":"image/png","size":120399},{"uid":"9d47302cf0167dd2","name":"screenshot","source":"9d47302cf0167dd2.png","type":"image/png","size":116314},{"uid":"f6182b27e85ebb2a","name":"screenshot","source":"f6182b27e85ebb2a.png","type":"image/png","size":116314},{"uid":"7a6d2136bda7bb2f","name":"screenshot","source":"7a6d2136bda7bb2f.png","type":"image/png","size":130986},{"uid":"a2a4f256db37bcf1","name":"log","source":"a2a4f256db37bcf1.txt","type":"text/plain","size":803}],"parameters":[],"stepsCount":1,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":16},"afterStages":[{"name":"driver::0","time":{"start":1747562842247,"stop":1747562847314,"duration":5067},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"play_sound_after_tests::0","time":{"start":1747563777477,"stop":1747563779868,"duration":2391},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"tag","value":"smoke('smoke test')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_add_lead_contract_buy_back"},{"name":"host","value":"LAPTOP-R624DMFA"},{"name":"thread","value":"19132-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_add_lead_contract_buy_back"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["smoke('smoke test')"]},"source":"aff652da56308b1.json","parameterValues":[]}